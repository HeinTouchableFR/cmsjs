// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
  shadowDatabaseUrl = "mysql://236899_dev:Stienforce62!!@mysql-heintouchable.alwaysdata.net/heintouchable_shadow"
}

model posts {
  id          Int        @id @default(autoincrement())
  postType   PostType     @default(PAGE)
  content     String?    @db.LongText
  description String?
  params      String?
  title       String     @db.VarChar(255)
  slug        String     @unique @db.VarChar(191)
  published   DateTime   @default(now())
  updated     DateTime?
  settings    settings[]
  author    users?    @relation(references: [id], fields: [authorId])
  authorId     Int?
  categories categories[]
  comments comments[]
}

model comments {
  id    Int    @id @default(autoincrement())
  content     String?    @db.LongText
  published   DateTime   @default(now())
  author    users?    @relation(references: [id], fields: [authorId])
  authorId     Int?
  post    posts?    @relation(references: [id], fields: [postId])
  postId     Int?
}

model categories {
  id    Int    @id @default(autoincrement())
  title       String     @db.VarChar(255)
  slug       String      @unique @db.VarChar(191)
  posts posts[]
}

model menus {
  id    Int     @id @default(autoincrement())
  items String? @db.LongText
  name  String  @db.VarChar(255)
}

model images {
  id           Int        @id @default(autoincrement())
  path          String     @db.LongText
  originalName String     @db.VarChar(255)
  name         String     @db.VarChar(255)
  created_at   DateTime   @default(now())
  Settings     settings[]
}

model settings {
  id          Int        @id @default(autoincrement())
  data        String     @unique @db.VarChar(191)
  value       String?    @db.VarChar(255)
  post        posts?     @relation(references: [id], fields: [postsId])
  image       images?    @relation(references: [id], fields: [imagesId])
  postsId     Int?
  imagesId    Int?
}

model accounts {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
}

model sessions {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
}

model users {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  role   Role     @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  posts posts[]
  comments comments[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
  EDITOR
}

enum PostType {
  PAGE
  ARTICLE
  PRODUCT
  FORM
  HEADER
  FOOTER
}

model verification_requests {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
}


generator client {
  provider = "prisma-client-js"
}
